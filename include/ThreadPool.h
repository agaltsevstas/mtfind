#pragma once

#include <functional>
#include <mutex>
#include <queue>
#include <thread>
#include <vector>


class ThreadPool
{
public:
    /*
     Конструктор для создания пула потоков с заданным кол-вом потоков.
     По умолчанию устанавливается кол-во возможных потоков взависимости от кол-ва ядер на процессоре.
     */
    ThreadPool(size_t num_threads = std::thread::hardware_concurrency())
    {
        // Заранее создаем потоки
        for (decltype(num_threads) i = 0; i < num_threads; ++i)
        {
            _threads.emplace_back([this]
            {
                // Бесконечный цикл для потоков, чтобы разребали очередь задач и потоки не засыпали
                while (true)
                {
                    std::function<void()> task;
                    // Осуществление синхронизации, чтобы один поток взял одну задачу из очереди задач
                    {
                        // Блокировка очереди, чтобы данные были синхронизированы
                        std::unique_lock lock(_mutex);
  
                        /*
                         Тоже самое, что:
                         while (_tasks.empty() && !_stop)
                             cv.wait(lock);
                         
                         Остановка всех потоков до тех пор, пока один поток не возьмет одну задачу из очереди задач и не начнет ее выполнять и очередь опустеет или не вызовется деструктор
                         
                          в случае НЕвыполнения условия: идет засыпание потока и помещение его в очередь ожидающих потоков с помощью планировщика (Scheduler) через поход в ядро процессора - и так все потоки-читатели поочередно помещаются в очередь ожидания.
                          в случае ВЫПОЛНЕНИЯ условия или пришло уведомление notify_one (удаляется ОДИН поток из очереди и он пробуждается)/notify_all (удаляются ВСЕ потоки из очереди и они пробуждаются): Происходит попытка захвата mutex (lock) ОДНИМ потоком, продолжающаяся до тех пор, пока он не будет захвачен (бывает другой поток успел раньше захватить mutex и не отпустил его еще). После захвата (lock) mutexа ОДНИМ потоком, он выходит из wait, читает данные, выходит из области видимости unique_lock, освобождая mutex (unlock). При notify_all остальные пробудившиеся потоки поочередно выходят из wait, захватывая (lock) и освобождая (unlock) mutex.
                        
                         */
                        _cv.wait(lock, [this] { return !_tasks.empty() || _stop; });
  
                        // При разрушении объекта хвост очереди может остаться, поэтому дожидаемся завершения обработки всей очереди и выходим из цикла активного ожидания, если сработал деструктор и задач нет
                        if (_stop && _tasks.empty())
                            return;
  
                        // Получить следующую задачу из очереди
                        task = std::move(_tasks.front());
                        _tasks.pop();
                    }
  
                    task(); // Выполнение задачи
                }
            });
        }
    }
  
    // Деструктор для остановки пула потоков
    ~ThreadPool()
    {
        // Блокировка очереди задач, чтобы безопасно обновить флаг остановки, т.к. он не атомарный
        {
            std::unique_lock lock(_mutex);
            _stop = true;
            // _cv.notify_all(); Нужно уведомлять условную переменную после того, как отпустили mutex (unlock), чтобы wait сразу же захватил (lock) mutex и тратил время на ожидание разблокировки (unlock), поэтому он выносится за скобки
        }
  
        _cv.notify_all(); // в wait удаляются ВСЕ потоки из очереди и они пробуждаются
  
        // Дождаться завершения всех потоков
        for (auto& thread : _threads)
            thread.join();
    }
  
    // Добавление задачи в очередь
    void AddTask(std::function<void()> task)
    {
        // Осуществление синхронизации, чтобы не было data race
        {
            std::unique_lock lock(_mutex);
            _tasks.emplace(std::move(task));
        }
        
        _cv.notify_one(); // в wait удаляется ОДИН поток из очереди и он пробуждается
    }
  
private:
    std::queue<std::function<void()> > _tasks; // Очередь задач
    std::vector<std::thread> _threads;         // Пул потоков для обработки очереди задач
    std::mutex _mutex;                         // mutex для синхронизации очереди задачи
    std::condition_variable _cv;               // Условная переменная, сигнализирующая об изменении состояния очереди задач
    bool _stop = false;                        // Флаг, для остановки пула потоков
};
